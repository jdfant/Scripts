pipeline {
    agent none
    options {
        timeout(time: 15, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '7'))
    }

    stages {
        stage('Prepare'){
            agent { label 'docker' }
            steps {
                parallel (
                    Clean: {
                        deleteDir()
                    },
                   // https://www.jenkins.io/doc/pipeline/steps/slack/
                   NotifySlack: {
                       slackSend channel: 'cicd', color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
                   }
                   // https://www.jenkins.io/blog/2017/02/15/declarative-notifications
                   emailext (
                       subject: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                       body: """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                         <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                       recipientProviders: [[$class: 'DevelopersRecipientProvider']])
                )
            }
        }

        stage('Checkout'){
            agent { label 'docker' }
            steps {
                git credentialsId: 'xxxxxxxxxxxxxxxxxxxxxx', url: 'git@gitrepo.domain:jdfant/python.git'
                script {
                    env.GIT_COMMIT_HASH = sh returnStdout: true, script: 'git rev-parse --verify HEAD'
                }
            }
        }

        stage('Build Docs') {
            agent {
                docker {
                    image "registry.home.lan/python"
                    label "docker"
                }
            }
            steps {
                sh 'python build'
            }
        }

        stage('Prepare Docker Image'){
            agent { label 'docker' }
            steps {
                parallel (
                    TestDockerfile: {
                        script {
                            def lintResult = sh returnStdout: true, script: 'docker run --rm -i hadolint/hadolint < Dockerfile'
        // Alternative -- def lintResult = sh returnStdout: true, script: 'docker run -it --rm -v $PWD:/root projectatomic/dockerfile-lint dockerfile_lint -f Dockerfile'
                            if (lintResult.trim() == '') {
                                println 'Lint finished with no errors'
                            } else {
                                println 'Lint Error'
                                println "${lintResult}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }, // end test dockerfile
                    BuildImage: {
                        sh 'chmod +x build-python-image.sh'
                        sh './build-python-image.sh'
                    } 
                )
            }

            post {
                success {
                    sh 'chmod +x push-python-image.sh'
                    sh './push-python-image.sh'
                }
            }
        }

    }

    post {
        success {
            // https://www.jenkins.io/doc/pipeline/steps/slack/
            NotifySlack: {
               slackSend channel: 'cicd', color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})" 
            }
            // https://www.jenkins.io/blog/2017/02/15/declarative-notifications
            emailext (
                subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                  <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']])
        }

        failure {
            // https://www.jenkins.io/doc/pipeline/steps/slack/
            NotifySlack: {
               slackSend channel: 'cicd', color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})" 
            }
            // https://www.jenkins.io/blog/2017/02/15/declarative-notifications
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                  <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']])
        }
    }
}
